CREATE TABLE IF NOT EXISTS groups (
    ID int NOT NULL AUTO_INCREMENT,
    Name VARCHAR(255) NOT NULL,
    Description VARCHAR(255),
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS users (
    ID int NOT NULL AUTO_INCREMENT,
    Email VARCHAR(255) NOT NULL,
    Creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Password VARCHAR(255) NOT NULL,
    GroupID int NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (GroupID) REFERENCES groups(ID)
);

CREATE TABLE IF NOT EXISTS resets (
    ID int NOT NULL AUTO_INCREMENT,
    Token VARCHAR(255) NOT NULL,
    UserID int NOT NULL,
    Creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ID),
    FOREIGN KEY (userID) REFERENCES users(ID)
);

CREATE TABLE IF NOT EXISTS notes (
    ID int NOT NULL AUTO_INCREMENT,
	Creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Deadline TIMESTAMP,
    Title VARCHAR(255),
    Content MEDIUMTEXT,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS editors (
    ID int NOT NULL AUTO_INCREMENT,
	UserID int NOT NULL,
	NoteID int NOT NULL,
	Creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ID),
	FOREIGN KEY (UserID) REFERENCES users(ID),
	FOREIGN KEY (NoteID) REFERENCES notes(ID)
);

CREATE TABLE IF NOT EXISTS logs (
    ID int NOT NULL AUTO_INCREMENT,
	KeyData VARCHAR(255) NOT NULL,
    LogLevel INT NOT NULL,
	Creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	Action MEDIUMTEXT NOT NULL,
    Referer MEDIUMTEXT,
    ClientIP MEDIUMTEXT,
    PRIMARY KEY (ID)
);

INSERT INTO `groups` (`ID`, `Name`, `Description`)
VALUES ('1', 'Benutzer', 'Normaler Benutzer'), ('2', 'Admin', 'Admin-User');
